name: Infinity Pool CI/CD
env:
  AWS_REGION: ${{ vars.AWS_REGION }}
  ENVIRONMENT: dev
  DEPLOYMENT_NAME: infinity-pool
  DEPLOYMENT_KEY: infinity-pool-dev
  TERRAFORM_VERSION: 1.11.2
  TERRAGRUNT_VERSION: 0.75.10
  TERRAGRUNT_DIRECTORY: infrastructure/live/${{ env.ENVIRONMENT }}
on:
  workflow_dispatch:  # This makes the workflow manually triggerable
  push:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/LICENSE'
      - '**/.github/workflows/**'
      - '**/docs/**'
  pull_request:
    branches:
      - main
    paths-ignore:
      - '**/README.md'
      - '**/LICENSE'
      - '**/.github/workflows/**'
      - '**/docs/**'

jobs:
  lint:
    name: Lint and Static Analysis
    if: github.event_name != 'push' || github.event.before != '0000000000000000000000000000000000000000'
    runs-on: ubuntu-latest
    steps:
      # Checkout the repository with the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      # Install the latest version of Terraform CLI and configure the Terraform CLI
      # configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
      # Initialize a new or existing Terraform working directory by creating initial files,
      # loading any remote state, downloading modules, etc.
      - name: Terraform Init
        run: terraform init
      # Checks that all Terraform configuration files adhere to a canonical format
      - name: Terraform Format
        run: terraform fmt -check
      # Terraform linting and validation
      - name: Terraform Validate
        run: terraform validate

  deploy-infra:
    name: Deploy the Infrastructure
    if: github.event_name != 'push' || github.event.before != '0000000000000000000000000000000000000000'
    needs: [ lint ]
    runs-on: ubuntu-latest
    outputs:
      DB_ENDPOINT: ${{ steps.terragrunt-apply.outputs.DB_ENDPOINT }}
      ECR_REPOSITORY_URL: ${{ steps.terragrunt-apply.outputs.ECR_REPOSITORY_URL }}
      EKS_CLUSTER_ENDPOINT: ${{ steps.terragrunt-apply.outputs.EKS_CLUSTER_ENDPOINT }}
      EKS_CLUSTER_NAME: ${{ steps.terragrunt-apply.outputs.EKS_CLUSTER_NAME }}
      SERVICE_ROLE_ARN: ${{ steps.terragrunt-apply.outputs.SERVICE_ROLE_ARN }}
    steps:
      # Checkout the repository with the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4
      # Configure AWS Credentials. See: https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          output-credentials: true

      # Infrastructure deployment
      - name: Terragrunt Apply
        id: terragrunt-apply
        uses: gruntwork-io/terragrunt-action@v2.1.5
        env:
          INPUT_POST_EXEC_1: terragrunt run-all output -json > outputs.json
          INPUT_POST_EXEC_2: cat outputs.json
          INPUT_POST_EXEC_3: jq -r -s 'add | to_entries | .[] | "\(.key | ascii_upcase)=\(.value.value)"' outputs.json  >> $GITHUB_OUTPUT
        with:
          tf_version: ${{ env.TERRAFORM_VERSION }}
          tg_version: ${{ env.TERRAGRUNT_VERSION }}
          tg_dir: ${{ env.TERRAGRUNT_DIRECTORY }}
          tg_command: run-all apply

  deploy-services:
    name: Deploy Infinity Pool Services
    if: github.event_name != 'push' || github.event.before != '0000000000000000000000000000000000000000'
    needs: [ deploy-infra ]
    runs-on: ubuntu-latest
    steps:

      # Checkout the repository with the GitHub Actions runner
      - name: Checkout
        uses: actions/checkout@v4

      # Configure AWS Credentials. See: https://github.com/aws-actions/configure-aws-credentials
      - name: Configure AWS credentials
        id: aws-credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      # Login to ECR. See: https://github.com/aws-actions/amazon-ecr-login
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # BACKEND SERVICE
      - name: Build, tag, and push BACKEND docker image to Amazon ECR
        working-directory: app/backend
        env:
          BACKEND_IMAGE_TAG: backend-${{ github.sha }}
        run: |
          docker build -t ${{ needs.deploy-infra.outputs.ECR_REPOSITORY_URL }}:$BACKEND_IMAGE_TAG .
          docker push ${{ needs.deploy-infra.outputs.ECR_REPOSITORY_URL }}:$BACKEND_IMAGE_TAG

      # GATEWAY SERVICE
      - name: Build, tag, and push GATEWAY docker image to Amazon ECR
        working-directory: app/gateway
        env:
          GATEWAY_IMAGE_TAG: gateway-${{ github.sha }}
        run: |
          docker build -t ${{ needs.deploy-infra.outputs.ECR_REPOSITORY_URL }}:$GATEWAY_IMAGE_TAG .
          docker push ${{ needs.deploy-infra.outputs.ECR_REPOSITORY_URL }}:$GATEWAY_IMAGE_TAG

      # RUN HELM
      # See: https://github.com/marketplace/actions/deploy-helm-chart-to-aws-eks-cluster
      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.12
        env:
          BACKEND_IMAGE_TAG: backend-${{ github.sha }}
          GATEWAY_IMAGE_TAG: gateway-${{ github.sha }}
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ needs.deploy-infra.outputs.EKS_CLUSTER_NAME }}
          chart-path: helm/
          namespace: default
          values: |
            aws.region=${{ env.AWS_REGION }},
            aws.serviceRoleArn=${{ needs.deploy-infra.outputs.SERVICE_ROLE_ARN }},
            gateway.image.repositoryUrl=${{ needs.deploy-infra.outputs.ECR_REPOSITORY_URL }},
            gateway.image.tag=${{ env.GATEWAY_IMAGE_TAG }},
            backend.image.repositoryUrl=${{ needs.deploy-infra.outputs.ECR_REPOSITORY_URL }},
            backend.image.tag=${{ env.BACKEND_IMAGE_TAG }},
            backend.dbEndpoint=${{ needs.deploy-infra.outputs.DB_ENDPOINT }}
          name: ${{ env.DEPLOYMENT_KEY }}




